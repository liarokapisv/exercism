
==================== FINAL INTERFACE ====================
2016-11-15 19:58:05.683402 UTC

interface grade-school-0.0.0-GrvN3igBivb4lrKJuDTF9G:School 8001
  interface hash: 13b6440547f8fd36aec3d24c785a1b7d
  ABI hash: 793104f6a5345ccf4027863af52b4f6f
  export-list hash: 4fe457c5b892790a6a00c141ffb947c1
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: b159a15c55fa7c6870cb2eb79bbae5a5
  sig of: Nothing
  used TH splices: False
  where
exports:
  School.add
  School.empty
  School.grade
  School.sorted
  School.School
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.0.0*
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
import  -/  base-4.9.0.0:Data.List 49b86831b79b49ce5d4d9416ecba61df
import  -/  base-4.9.0.0:Data.OldList 0058409f994fb13ae0616e3f1e5b4dae
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 24b19ef74cea78e4c18332bed9f0491d
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base 1e8d61dcc59a1a983b27bab6fd6bdcaf
f03fffde2637cea02cdaf34fc2f53fa8
  $sfindWithDefault1 ::
    a -> GHC.Types.Int -> Data.Map.Base.Map GHC.Types.Int a -> a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*U><S,1*U(U)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Data.Map.Base.Map GHC.Types.Int a) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 School.$wpoly_go10 @ a w ww1 w2 }) -}
8ebb3ef84ef4eaef2d87475c66286e8a
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   School.$trModule2
                   School.$trModule1) -}
9591f9afc2b1d7f64e3f94f9471b91e1
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "School"#) -}
269d005f13954e63cfb9125533c1f68d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "grade-school-0.0.0-GrvN3igBivb4lrKJuDTF9G"#) -}
aaa833905d45d3409d100d7972f6a931
  $w$sgo10 ::
    (GHC.Types.Int -> a1 -> a1 -> a1)
    -> GHC.Prim.Int#
    -> a1
    -> Data.Map.Base.Map GHC.Types.Int a1
    -> Data.Map.Base.Map GHC.Types.Int a1
  {- Arity: 4, Strictness: <L,1*C1(C1(C1(U)))><L,U><L,U><S,1*U>,
     Inline: [0] -}
57c5fbb1f47e28ea95c231d5bd0eaeff
  $wadd ::
    GHC.Prim.Int#
    -> GHC.Base.String
    -> School.School
    -> Data.Map.Base.Map GHC.Types.Int [GHC.Base.String]
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: GHC.Base.String)
                   (w1 :: School.School) ->
                 School.$w$sgo10
                   @ [GHC.Base.String]
                   School.add1
                   ww
                   (GHC.Types.: @ GHC.Base.String w (GHC.Types.[] @ GHC.Base.String))
                   w1) -}
22921c434d04bd0d93750686940aa619
  $wpoly_go10 ::
    a -> GHC.Prim.Int# -> Data.Map.Base.Map GHC.Types.Int a -> a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*U><L,U><S,1*U>,
     Inline: [0] -}
57fd58efd851fe98b0f6b16cd82874c9
  type School = Data.Map.Base.Map GHC.Types.Int [GHC.Base.String]
992777a7ce56906adeb57064144b9af0
  add ::
    GHC.Types.Int -> GHC.Base.String -> School.School -> School.School
  {- Arity: 3, Strictness: <S,1*U(U)><L,U><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: GHC.Base.String)
                   (w2 :: School.School) ->
                 case w of ww { GHC.Types.I# ww1 -> School.$wadd ww1 w1 w2 }) -}
53dd5d5f8e00943eaf9187a11a600ebd
  add1 ::
    GHC.Types.Int
    -> [GHC.Base.String] -> [GHC.Base.String] -> [[GHC.Types.Char]]
  {- Arity: 3, HasNoCafRefs,
     Unfolding: (\ (ds :: GHC.Types.Int)[OneShot]
                   (x' :: [GHC.Base.String])[OneShot]
                   (y' :: [GHC.Base.String])[OneShot] ->
                 GHC.Base.++ @ [GHC.Types.Char] y' x') -}
07c09258c625a2e4a0c3842313ab85d5
  empty :: School.School
  {- HasNoCafRefs,
     Unfolding: InlineRule (0, True, True)
                (Data.Map.Base.Tip @ GHC.Types.Int @ [GHC.Base.String]) -}
7dba55bafde49c6d36202a5915de4bb8
  grade :: GHC.Types.Int -> School.School -> [GHC.Base.String]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (k :: GHC.Types.Int)
                   (eta2 :: Data.Map.Base.Map GHC.Types.Int [GHC.Base.String]) ->
                 School.$sfindWithDefault1
                   @ [GHC.Base.String]
                   (GHC.Types.[] @ GHC.Base.String)
                   k
                   eta2) -}
34cd5c7408ed81e39a2f45214d5cc50c
  sorted :: School.School -> [(GHC.Types.Int, [GHC.Base.String])]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Map.Base.Map GHC.Types.Int [GHC.Base.String]) ->
                 Data.Map.Base.toAscList1
                   @ GHC.Types.Int
                   @ [GHC.Base.String]
                   (GHC.Types.[] @ (GHC.Types.Int, [GHC.Base.String]))
                   (Data.Map.Base.map
                      @ [GHC.Base.String]
                      @ [GHC.Base.String]
                      @ GHC.Types.Int
                      School.sorted1
                      x)) -}
52dd3a147da19e9fbd75cc102808a88e
  sorted1 :: [GHC.Base.String] -> [GHC.Base.String]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: [GHC.Base.String]) ->
                 Data.OldList.sortBy
                   @ GHC.Base.String
                   GHC.Classes.$fOrd[]_$s$ccompare1
                   eta) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

