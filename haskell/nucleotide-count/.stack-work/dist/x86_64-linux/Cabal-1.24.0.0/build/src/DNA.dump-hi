
==================== FINAL INTERFACE ====================
2016-11-15 16:48:23.889639 UTC

interface nucleotide-count-0.0.0-LnIjeFZp0SF6K8oWePf1A:DNA 8001
  interface hash: de4e07f23fb1df87ec12037eef3988ae
  ABI hash: fd0a3a8503bf31a0785861928c409eb5
  export-list hash: efdfbcc1f77a101c5bc13346bfaabf47
  orphan hash: 126d0bab1fabde653dee905dd409ea00
  flag hash: b159a15c55fa7c6870cb2eb79bbae5a5
  sig of: Nothing
  used TH splices: False
  where
exports:
  DNA.count
  DNA.nucleotideCounts
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.0.0*
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
import  -/  base-4.9.0.0:Data.Either bd9f099b82d4ed2d98c56d7144ac6957
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.Functor 6fc476505db88d678632a4a838125f13
import  -/  base-4.9.0.0:Data.Traversable 7ce5b7ee67475ac3d03ae825b86efd9f
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 24b19ef74cea78e4c18332bed9f0491d
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base 1e8d61dcc59a1a983b27bab6fd6bdcaf
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
e0dfac5c5509a49d20e7372599e241b6
  $sfromList ::
    [(GHC.Types.Char, a)] -> Data.Map.Base.Map GHC.Types.Char a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [(GHC.Types.Char, a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Base.Tip @ GHC.Types.Char @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt { GHC.Types.C# ipv ->
                           Data.Map.Base.Bin
                             @ GHC.Types.Char
                             @ a
                             1#
                             dt
                             x
                             (Data.Map.Base.Tip @ GHC.Types.Char @ a)
                             (Data.Map.Base.Tip @ GHC.Types.Char @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx of wild4 { GHC.Types.C# c1 ->
                           case ky of wild5 { GHC.Types.C# c2 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.geChar# c1 c2) of wild6 {
                             GHC.Types.False
                             -> DNA.$wpoly_go10
                                  @ a
                                  1#
                                  (Data.Map.Base.Bin
                                     @ GHC.Types.Char
                                     @ a
                                     1#
                                     wild4
                                     x
                                     (Data.Map.Base.Tip @ GHC.Types.Char @ a)
                                     (Data.Map.Base.Tip @ GHC.Types.Char @ a))
                                  wild2
                             GHC.Types.True
                             -> DNA.$sfromList1
                                  @ a
                                  (Data.Map.Base.Bin
                                     @ GHC.Types.Char
                                     @ a
                                     1#
                                     wild4
                                     x
                                     (Data.Map.Base.Tip @ GHC.Types.Char @ a)
                                     (Data.Map.Base.Tip @ GHC.Types.Char @ a))
                                  wild2 } } } } } } }) -}
121dfd5431c2514502ab342c67b48c07
  $sfromList1 ::
    Data.Map.Base.Map GHC.Types.Char a1
    -> [(GHC.Types.Char, a1)] -> Data.Map.Base.Map GHC.Types.Char a1
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
a0d6af9ffd13265c23d8aff74bf6c65b
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module DNA.$trModule2 DNA.$trModule1) -}
296d9ff70864ee80e6ec1edf8e05d555
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "DNA"#) -}
73646d82a8155943ce422a1498ead56b
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "nucleotide-count-0.0.0-LnIjeFZp0SF6K8oWePf1A"#) -}
caa1d1d8604aaeb2af198e5b035a1b6b
  $w$sgo1 ::
    GHC.Prim.Char#
    -> a1
    -> Data.Map.Base.Map GHC.Types.Char a1
    -> Data.Map.Base.Map GHC.Types.Char a1
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>, Inline: [0] -}
1bffb282bf90d2af937e256823fae65e
  $w$sgo10 ::
    (GHC.Types.Char -> a1 -> GHC.Base.Maybe a1)
    -> GHC.Prim.Char#
    -> Data.Map.Base.Map GHC.Types.Char a1
    -> Data.Map.Base.Map GHC.Types.Char a1
  {- Arity: 3, Strictness: <L,1*C1(C1(U))><L,U><S,1*U>,
     Inline: [0] -}
aaf857ffddc3a2df44cd9e21cc089114
  $wpoly_go10 ::
    GHC.Prim.Int#
    -> Data.Map.Base.Map GHC.Types.Char a
    -> [(GHC.Types.Char, a)]
    -> Data.Map.Base.Map GHC.Types.Char a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
c3d2f3a09000d24c68aca8d114cdc279
  count ::
    GHC.Types.Char
    -> GHC.Base.String
    -> Data.Either.Either GHC.Base.String GHC.Types.Int
  {- Arity: 2, Strictness: <L,U(U)><L,1*U>,
     Unfolding: (\ (c :: GHC.Types.Char) (str :: GHC.Base.String) ->
                 case GHC.List.elem
                        @ GHC.Types.Char
                        GHC.Classes.$fEqChar
                        c
                        DNA.count3 of wild {
                   GHC.Types.False -> DNA.count4
                   GHC.Types.True
                   -> case DNA.count_go
                             (GHC.Base.map
                                @ GHC.Types.Char
                                @ (Data.Either.Either GHC.Base.String GHC.Types.Char)
                                DNA.validate
                                str) of wild1 {
                        Data.Either.Left x
                        -> Data.Either.Left @ [GHC.Types.Char] @ GHC.Types.Int x
                        Data.Either.Right y
                        -> Data.Either.Right
                             @ [GHC.Types.Char]
                             @ GHC.Types.Int
                             (letrec {
                                $wgo :: [GHC.Types.Char] -> GHC.Prim.Int# -> GHC.Prim.Int#
                                  {- Arity: 2, Strictness: <S,1*U><L,U>, Inline: [0] -}
                                = \ (w :: [GHC.Types.Char]) (ww :: GHC.Prim.Int#) ->
                                  case w of wild2 {
                                    [] -> ww
                                    : y1 ys
                                    -> case y1 of wild3 { GHC.Types.C# x ->
                                       case c of wild4 { GHC.Types.C# y2 ->
                                       case GHC.Prim.tagToEnum#
                                              @ GHC.Types.Bool
                                              (GHC.Prim.eqChar# x y2) of wild5 {
                                         GHC.Types.False -> $wgo ys ww
                                         GHC.Types.True -> $wgo ys (GHC.Prim.+# ww 1#) } } } }
                              } in
                              case $wgo y 0# of ww { DEFAULT -> GHC.Types.I# ww }) } }) -}
7717c79f66c39659d4d21549bf847703
  count1 :: Data.Either.Either [GHC.Types.Char] GHC.Types.Char
  {- Strictness: m1,
     Unfolding: (Data.Either.Left
                   @ [GHC.Types.Char]
                   @ GHC.Types.Char
                   DNA.count2) -}
6666b8adffe284ef4a1cedd0a2b4e126
  count2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Invalid nucleotide"#) -}
34b6d3592e29feba61598ee1262ba921
  count3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CGTA"#) -}
3cb4c8c9a050552cf410f52cb2a7c1c8
  count4 :: Data.Either.Either [GHC.Types.Char] GHC.Types.Int
  {- Unfolding: (Data.Either.Left
                   @ [GHC.Types.Char]
                   @ GHC.Types.Int
                   DNA.count2) -}
b6d11d862774858e55f40f6c19900745
  count_go ::
    [Data.Either.Either GHC.Base.String GHC.Types.Char]
    -> Data.Either.Either GHC.Base.String [GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
51e12f7b840d6b1ddaa11ccc5aafa318
  nucleotideCounts ::
    GHC.Base.String
    -> Data.Either.Either
         GHC.Base.String (Data.Map.Base.Map GHC.Types.Char GHC.Types.Int)
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (str :: GHC.Base.String) ->
                 case DNA.count_go
                        (GHC.Base.map
                           @ GHC.Types.Char
                           @ (Data.Either.Either GHC.Base.String GHC.Types.Char)
                           DNA.validate
                           str) of wild {
                   Data.Either.Left x
                   -> Data.Either.Left
                        @ [GHC.Types.Char]
                        @ (Data.Map.Base.Map GHC.Types.Char GHC.Types.Int)
                        x
                   Data.Either.Right y
                   -> Data.Either.Right
                        @ [GHC.Types.Char]
                        @ (Data.Map.Base.Map GHC.Types.Char GHC.Types.Int)
                        (DNA.nucleotideCounts_go y) }) -}
e432f572582f035bbb8f026e6606d83d
  nucleotideCounts_go ::
    [GHC.Types.Char] -> Data.Map.Base.Map GHC.Types.Char GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U> -}
a4641e65fe7e6728cd76c29ac190fbf6
  validate ::
    GHC.Types.Char -> Data.Either.Either GHC.Base.String GHC.Types.Char
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (c :: GHC.Types.Char) ->
                 case GHC.List.elem
                        @ GHC.Types.Char
                        GHC.Classes.$fEqChar
                        c
                        DNA.count3 of wild {
                   GHC.Types.False -> DNA.count1
                   GHC.Types.True
                   -> Data.Either.Right @ GHC.Base.String @ GHC.Types.Char c }) -}
"SPEC/DNA fromList @ Char _" [ALWAYS] forall @ a
                                             ($dOrd :: GHC.Classes.Ord GHC.Types.Char)
  Data.Map.Base.fromList @ GHC.Types.Char @ a $dOrd
  = DNA.$sfromList @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

