
==================== FINAL INTERFACE ====================
2016-11-12 08:26:05.710631 UTC

interface bob-0.0.0-BYvLF0MkBeW5sNhLCN5oPY:Bob 8001
  interface hash: 0dc9c7113c446fe133e91b27cb4c50fd
  ABI hash: caebd6c7ea1003ca359974bd36483f5d
  export-list hash: 761a7e66c5af1cfa43f684670312610f
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: b159a15c55fa7c6870cb2eb79bbae5a5
  sig of: Nothing
  used TH splices: False
  where
exports:
  Bob.responseFor
module dependencies:
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:Data.Char eb33dc25ecb52d018a0ca26590e2b50b
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Unicode 2343b0871604cc5116abba8f24d75b42
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
a6f4eee25f6582c80d4c8e9dcbb01f82
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Bob.$trModule2 Bob.$trModule1) -}
01da45317c408f3bc7ed11a89030fcb9
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Bob"#) -}
50876355baa281af2d73496ea404c18e
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "bob-0.0.0-BYvLF0MkBeW5sNhLCN5oPY"#) -}
5d2eb3346325db11339e5cbe8fdef7f8
  responseFor :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (sentence :: GHC.Base.String) ->
                 case (Bob.responseFor_go3 sentence)
                        `cast`
                      (Data.Monoid.N:All[0]) of wild {
                   GHC.Types.False
                   -> case (Bob.responseFor_go2 sentence)
                             `cast`
                           (Data.Monoid.N:Any[0]) of wild1 {
                        GHC.Types.False
                        -> case Bob.responseFor_go1
                                  sentence
                                  (GHC.List.lastError @ GHC.Types.Char) of wild2 { GHC.Types.C# x ->
                           case x of wild3 {
                             DEFAULT -> Bob.responseFor4 '?'# -> Bob.responseFor3 } }
                        GHC.Types.True
                        -> case (Bob.responseFor_go sentence)
                                  `cast`
                                (Data.Monoid.N:All[0]) of wild2 {
                             GHC.Types.False
                             -> case Bob.responseFor_go1
                                       sentence
                                       (GHC.List.lastError
                                          @ GHC.Types.Char) of wild3 { GHC.Types.C# x ->
                                case x of wild4 {
                                  DEFAULT -> Bob.responseFor4 '?'# -> Bob.responseFor3 } }
                             GHC.Types.True -> Bob.responseFor2 } }
                   GHC.Types.True -> Bob.responseFor1 }) -}
ba3bbac1080d6d7deeb5aaccf74ce5b5
  responseFor1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Fine. Be that way!"#) -}
4d18aab7ac682a86d0fc19e703013e6f
  responseFor2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Whoa, chill out!"#) -}
a5339ce0f9214a4b46f10069ba54eb38
  responseFor3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Sure."#) -}
5c5316738dcb4ec6db93394ab8382535
  responseFor4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Whatever."#) -}
fc3aa88b3612a0a5a1df00b9fada2c8b
  responseFor_go :: [GHC.Types.Char] -> Data.Monoid.All
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
2cdce2e882017cdaca6ce8e7a05fbb9c
  responseFor_go1 ::
    [GHC.Types.Char] -> GHC.Types.Char -> GHC.Types.Char
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U)> -}
cfd39bf439d34c004450acf4e5ac33b6
  responseFor_go2 :: [GHC.Types.Char] -> Data.Monoid.Any
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
3bbb57892833386cc3f9336e4397f7e0
  responseFor_go3 :: [GHC.Types.Char] -> Data.Monoid.All
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

