
==================== FINAL INTERFACE ====================
2016-11-15 22:29:29.376297 UTC

interface raindrops-0.0.0-J4IIvNImlRO9lhTrOjmHeg:Raindrops 8001
  interface hash: d9ad95d87e2b345741d2eecdcdd55413
  ABI hash: 28e7d8f39ed6938aeca00fda7cf1ae6a
  export-list hash: 4e49dac2006d40eaf4561c06f68883a9
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: b159a15c55fa7c6870cb2eb79bbae5a5
  sig of: Nothing
  used TH splices: False
  where
exports:
  Raindrops.convert
module dependencies:
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.Tuple acb0ed10307ed88df6c81b8589f4de16
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Real 08bf4acb5f2508f89d6fbcd57fe232e9
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  integer-gmp-1.0.0.1:GHC.Integer.Type 62c0e736506aac47ef40569f5b82e19d
b31ea6af09fb0bef263e22dcbe23e5ea
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Raindrops.$trModule2
                   Raindrops.$trModule1) -}
75aa91c4864914bf99f6d8f08c12ca89
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Raindrops"#) -}
e81975c17b0c861b3221099dcae7a482
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "raindrops-0.0.0-J4IIvNImlRO9lhTrOjmHeg"#) -}
d6479f5414772ce3e7c72d64a6c14264
  convert :: GHC.Integer.Type.Integer -> GHC.Base.String
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (n :: GHC.Integer.Type.Integer) ->
                 let {
                   $wc :: GHC.Integer.Type.Integer -> GHC.Types.Bool
                     {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
                   = \ (ww :: GHC.Integer.Type.Integer) ->
                     case GHC.Integer.Type.eqInteger#
                            ww
                            Raindrops.convert8 of wild { DEFAULT ->
                     case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild of wild1 {
                       GHC.Types.False
                       -> case GHC.Integer.Type.eqInteger#
                                 (GHC.Integer.Type.modInteger n ww)
                                 Raindrops.convert8 of wild2 { DEFAULT ->
                          GHC.Prim.tagToEnum# @ GHC.Types.Bool wild2 }
                       GHC.Types.True
                       -> case GHC.Real.divZeroError ret_ty GHC.Types.Bool of {} } }
                 } in
                 let {
                   r :: [GHC.Types.Char]
                   = case $wc Raindrops.convert7 of wild {
                       GHC.Types.False
                       -> case $wc Raindrops.convert6 of wild1 {
                            GHC.Types.False -> GHC.Types.[] @ GHC.Types.Char
                            GHC.Types.True -> Raindrops.convert4 }
                       GHC.Types.True
                       -> GHC.Base.++
                            @ GHC.Types.Char
                            Raindrops.convert3
                            (case $wc Raindrops.convert6 of wild1 {
                               GHC.Types.False -> GHC.Types.[] @ GHC.Types.Char
                               GHC.Types.True -> Raindrops.convert4 }) }
                 } in
                 case $wc Raindrops.convert2 of wild {
                   GHC.Types.False
                   -> case r of wild1 {
                        [] -> GHC.Show.$fShowInteger_$cshow n : ds1 ds2 -> wild1 }
                   GHC.Types.True
                   -> case GHC.Base.++
                             @ GHC.Types.Char
                             Raindrops.convert1
                             r of wild1 {
                        [] -> GHC.Show.$fShowInteger_$cshow n : ds1 ds2 -> wild1 } }) -}
210b86d6ea669a14d7efbba607a6224b
  convert1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Pling"#) -}
35a0b26d8ae82f6cff7bf1403e31539a
  convert2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (3) -}
0143ebe3d66496f1870fe595fe32e912
  convert3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Plang"#) -}
64b218a41e4d3a1505e9659614a45ae4
  convert4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Raindrops.convert5
                   (GHC.Types.[] @ GHC.Types.Char)) -}
599c7ddb7319b5313465d1b945aaee12
  convert5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Plong"#) -}
57487bc2a1d64a9b381d631498c2c994
  convert6 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (7) -}
c4a9d72cab633e51dfe8227242549605
  convert7 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (5) -}
c1defce826839ea895e8376dc83da192
  convert8 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

