
==================== FINAL INTERFACE ====================
2016-11-14 01:10:31.048803 UTC

interface sum-of-multiples-0.0.0-EuoT2hUAWAUULQUVU0l2y:SumOfMultiples 8001
  interface hash: c5ebd90eac817900fb354facb8a47e8b
  ABI hash: 78908e433f854c5b8937a7052d133018
  export-list hash: 630fb62709284e5ad26cbbc46ce20c02
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: b159a15c55fa7c6870cb2eb79bbae5a5
  sig of: Nothing
  used TH splices: False
  where
exports:
  SumOfMultiples.sumOfMultiples
module dependencies:
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Real 08bf4acb5f2508f89d6fbcd57fe232e9
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  integer-gmp-1.0.0.1:GHC.Integer.Type 62c0e736506aac47ef40569f5b82e19d
cbf4e8626e97cb421af5081860d1d392
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   SumOfMultiples.$trModule2
                   SumOfMultiples.$trModule1) -}
28b8ced845421726a66e0565e730906e
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "SumOfMultiples"#) -}
0103ec14a80dd2304a3bd455866c6384
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "sum-of-multiples-0.0.0-EuoT2hUAWAUULQUVU0l2y"#) -}
f1eaca6e0d61167745c7777e334f9410
  sumOfMultiples ::
    [GHC.Integer.Type.Integer]
    -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
  {- Arity: 2, Strictness: <L,U><S,1*U>,
     Unfolding: (\ (factors :: [GHC.Integer.Type.Integer])
                   (limit :: GHC.Integer.Type.Integer) ->
                 let {
                   lim :: GHC.Integer.Type.Integer
                   = GHC.Integer.Type.minusInteger
                       limit
                       SumOfMultiples.sumOfMultiples2
                 } in
                 letrec {
                   go :: GHC.Integer.Type.Integer
                         -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
                     {- Arity: 2, Strictness: <S,U><S,1*U> -}
                   = \ (x :: GHC.Integer.Type.Integer)
                       (eta :: GHC.Integer.Type.Integer) ->
                     case GHC.Integer.Type.gtInteger# x lim of wild { DEFAULT ->
                     case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild of wild1 {
                       GHC.Types.False
                       -> letrec {
                            go1 :: [GHC.Integer.Type.Integer] -> Data.Monoid.Any
                              {- Arity: 1, Strictness: <S,1*U> -}
                            = \ (ds :: [GHC.Integer.Type.Integer]) ->
                              case ds of wild2 {
                                [] -> GHC.Types.False `cast` (Sym (Data.Monoid.N:Any[0]))
                                : y ys
                                -> case GHC.Integer.Type.eqInteger#
                                          y
                                          SumOfMultiples.sumOfMultiples1 of wild3 { DEFAULT ->
                                   case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild3 of wild4 {
                                     GHC.Types.False
                                     -> case GHC.Integer.Type.eqInteger#
                                               (GHC.Integer.Type.modInteger x y)
                                               SumOfMultiples.sumOfMultiples1 of wild5 { DEFAULT ->
                                        case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild5 of wild6 {
                                          GHC.Types.False -> go1 ys
                                          GHC.Types.True
                                          -> GHC.Types.True `cast` (Sym (Data.Monoid.N:Any[0])) } }
                                     GHC.Types.True
                                     -> case GHC.Real.divZeroError
                                        ret_ty Data.Monoid.Any
                                        of {} } } }
                          } in
                          case (go1 factors) `cast` (Data.Monoid.N:Any[0]) of wild2 {
                            GHC.Types.False
                            -> go (GHC.Integer.Type.plusInteger x GHC.Enum.$fEnumInteger1) eta
                            GHC.Types.True
                            -> go
                                 (GHC.Integer.Type.plusInteger x GHC.Enum.$fEnumInteger1)
                                 (GHC.Integer.Type.plusInteger eta x) }
                       GHC.Types.True -> eta } }
                 } in
                 go
                   SumOfMultiples.sumOfMultiples1
                   SumOfMultiples.sumOfMultiples1) -}
d08038b29eb07ff2dbb59e9b29a24fb7
  sumOfMultiples1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
6e64f2da92fb6cbb1138e4db541ec2c5
  sumOfMultiples2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

